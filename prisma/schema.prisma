generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique(map: "email") @db.VarChar(255)
  name                String              @db.VarChar(100)
  gender              String              @db.VarChar(15)
  birth               DateTime            @db.Date
  address             String              @db.VarChar(255)
  detailAddress       String?             @map("detail_address") @db.VarChar(255)
  phoneNumber         String              @map("phone_number") @db.VarChar(15)
  
  userFavorCategories UserFavorCategory[]
  reviews             UserStoreReview[] 
  memberMissions      MemberMission[]

  @@map("user")
}

model FoodCategory {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(100)
  
  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Store {
  id      Int              @id @default(autoincrement())
  name    String           @db.VarChar(100)
  
  reviews UserStoreReview[]
  missions Mission[]

  @@map("store")
}

model UserStoreReview {
  id       Int    @id @default(autoincrement())
  store    Store  @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  storeId  Int    @map("store_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId   Int    @map("user_id")
  content  String @db.Text

  @@map("user_store_review")
}

model Mission {
  id         Int      @id @default(autoincrement())
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    Int      @map("store_id")
  reward     Int
  deadline   DateTime
  missionSpec String  @db.Text
  
  memberMissions MemberMission[]
  
  @@map("mission")
}

model MemberMission {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @map("user_id")
  mission    Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId  Int      @map("mission_id")
  status     String   @db.VarChar(15)

  @@map("member_mission")
}

